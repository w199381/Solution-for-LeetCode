/*Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4 */

public class Solution {
    public int SingleNumber(int[] nums) {
        Array.Sort(nums);
        if(nums.Length == 3)
        {
            while(nums[0] != nums[1] && nums[0] != nums[2])
            {
                return nums[0];
            }
            while(nums[1] != nums[0] && nums[1] != nums[2])
            {
                return nums[1];
            }
            while(nums[2] != nums[1] && nums[2] != nums[1])
            {
                return nums[2];
            }
        }
        else if(nums.Length == 1)
        {
            return nums[0];
        }
        for(int i = 0; i<nums.Length-2; )
        {
            if(nums[i] - nums[i+1] == 0)
            {
                i+=2;
            }
            else if(nums[i] - nums[i+1] != 0)
            {
                return nums[i];
            }
            else
                continue;
        }return nums[nums.Length-1];
    }
}

/*After submitting my answer, I found out ^ would make all the code easier*/
