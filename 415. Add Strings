/*Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.

Note:

The length of both num1 and num2 is < 5100.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.*/

public class Solution {
    public string AddStrings(string num1, string num2) {
        StringBuilder sb = new StringBuilder();
		int len1 = num1.Length - 1;
		int len2 = num2.Length - 1;	        
		if (len1 == 1 && num1[0] == '0') return num2;
		if (len2 == 1 && num2[0] == '0') return num1; 
		int carry = 0;
		while (len1 >= 0 || len2 >= 0)
		{
		            int a = len1 >= 0 ? num1[len1] -'0' : 0;
		            //char-'0' converts a char to a int
		            int b = len2 >= 0 ? num2[len2] -'0' : 0;
					//char-'0' converts a char to a int
		            int sum = a + b + carry;
		            sb.Append(""+(sum%10));
		            carry = sum / 10;
		            len1--;
		            len2--;
		}
		if (carry > 0) sb.Append(""+carry);
	        
		return new string(sb.ToString().Reverse().ToArray()); 
    }
}

/*	The solution above is not my original idea.
	I checked the solutions uploaded in Discuss as I could not figure out any solution. */