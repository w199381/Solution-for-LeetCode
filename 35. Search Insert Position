/*Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0   */

public class Solution {
    public int SearchInsert(int[] nums, int target) {
        int[] buffer = new int[nums.Length+1];
		for(int i = 0; i < nums.Length; i++)
		{
			buffer[i] = nums[i];
		}
		buffer[nums.Length] = target;
		Array.Sort(buffer);
		int result = Array.IndexOf(buffer,target);
        return result;
    }
}

/* Here is another solution using recursive method 

public class Solution {
    public int SearchInsert(int[] nums, int target) {
        return BinSearch(nums, 0, nums.Length - 1, target);
    }
    
    public int BinSearch(int[] nums, int left, int right, int target)
    {
        if (right == left)
        {
            if (nums[left] >= target)
                return left;
            return left + 1;
        }
        int center = left + (right - left) / 2;
        if (nums[center] == target)
            return center;
        if (nums[center] > target)
            return BinSearch(nums, left, center, target); //recursive code here
        return BinSearch(nums, center + 1, right, target); 
    }
}

*/